/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* SUM  := head=FAC tail={ op='\+|-' sm=FAC }*
* FAC  := head=ATOM tail={ op='\*|/' sm=ATOM }*
* ATOM := _ val=INT _ | _ '\(' val=SUM '\)' _
* INT  := val='[0-9]+'
* _    := '\s*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    SUM,
    SUM_$0,
    FAC,
    FAC_$0,
    ATOM_1,
    ATOM_2,
    INT,
    _,
}
export interface SUM {
    kind: ASTKinds.SUM;
    head: FAC;
    tail: SUM_$0[];
}
export interface SUM_$0 {
    kind: ASTKinds.SUM_$0;
    op: string;
    sm: FAC;
}
export interface FAC {
    kind: ASTKinds.FAC;
    head: ATOM;
    tail: FAC_$0[];
}
export interface FAC_$0 {
    kind: ASTKinds.FAC_$0;
    op: string;
    sm: ATOM;
}
export type ATOM = ATOM_1 | ATOM_2;
export interface ATOM_1 {
    kind: ASTKinds.ATOM_1;
    val: INT;
}
export interface ATOM_2 {
    kind: ASTKinds.ATOM_2;
    val: SUM;
}
export interface INT {
    kind: ASTKinds.INT;
    val: string;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchSUM($$dpth: number, cr?: ContextRecorder): Nullable<SUM> {
        return this.runner<SUM>($$dpth,
            (log) => {
                if (log) {
                    log("SUM");
                }
                let head: Nullable<FAC>;
                let tail: Nullable<SUM_$0[]>;
                let res: Nullable<SUM> = null;
                if (true
                    && (head = this.matchFAC($$dpth + 1, cr)) !== null
                    && (tail = this.loop<SUM_$0>(() => this.matchSUM_$0($$dpth + 1, cr), true)) !== null
                ) {
                    res = {kind: ASTKinds.SUM, head, tail};
                }
                return res;
            }, cr)();
    }
    public matchSUM_$0($$dpth: number, cr?: ContextRecorder): Nullable<SUM_$0> {
        return this.runner<SUM_$0>($$dpth,
            (log) => {
                if (log) {
                    log("SUM_$0");
                }
                let op: Nullable<string>;
                let sm: Nullable<FAC>;
                let res: Nullable<SUM_$0> = null;
                if (true
                    && (op = this.regexAccept(String.raw`(?:\+|-)`, $$dpth + 1, cr)) !== null
                    && (sm = this.matchFAC($$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.SUM_$0, op, sm};
                }
                return res;
            }, cr)();
    }
    public matchFAC($$dpth: number, cr?: ContextRecorder): Nullable<FAC> {
        return this.runner<FAC>($$dpth,
            (log) => {
                if (log) {
                    log("FAC");
                }
                let head: Nullable<ATOM>;
                let tail: Nullable<FAC_$0[]>;
                let res: Nullable<FAC> = null;
                if (true
                    && (head = this.matchATOM($$dpth + 1, cr)) !== null
                    && (tail = this.loop<FAC_$0>(() => this.matchFAC_$0($$dpth + 1, cr), true)) !== null
                ) {
                    res = {kind: ASTKinds.FAC, head, tail};
                }
                return res;
            }, cr)();
    }
    public matchFAC_$0($$dpth: number, cr?: ContextRecorder): Nullable<FAC_$0> {
        return this.runner<FAC_$0>($$dpth,
            (log) => {
                if (log) {
                    log("FAC_$0");
                }
                let op: Nullable<string>;
                let sm: Nullable<ATOM>;
                let res: Nullable<FAC_$0> = null;
                if (true
                    && (op = this.regexAccept(String.raw`(?:\*|/)`, $$dpth + 1, cr)) !== null
                    && (sm = this.matchATOM($$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.FAC_$0, op, sm};
                }
                return res;
            }, cr)();
    }
    public matchATOM($$dpth: number, cr?: ContextRecorder): Nullable<ATOM> {
        return this.choice<ATOM>([
            () => this.matchATOM_1($$dpth + 1, cr),
            () => this.matchATOM_2($$dpth + 1, cr),
        ]);
    }
    public matchATOM_1($$dpth: number, cr?: ContextRecorder): Nullable<ATOM_1> {
        return this.runner<ATOM_1>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_1");
                }
                let val: Nullable<INT>;
                let res: Nullable<ATOM_1> = null;
                if (true
                    && this.match_($$dpth + 1, cr) !== null
                    && (val = this.matchINT($$dpth + 1, cr)) !== null
                    && this.match_($$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.ATOM_1, val};
                }
                return res;
            }, cr)();
    }
    public matchATOM_2($$dpth: number, cr?: ContextRecorder): Nullable<ATOM_2> {
        return this.runner<ATOM_2>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_2");
                }
                let val: Nullable<SUM>;
                let res: Nullable<ATOM_2> = null;
                if (true
                    && this.match_($$dpth + 1, cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, cr) !== null
                    && (val = this.matchSUM($$dpth + 1, cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, cr) !== null
                    && this.match_($$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.ATOM_2, val};
                }
                return res;
            }, cr)();
    }
    public matchINT($$dpth: number, cr?: ContextRecorder): Nullable<INT> {
        return this.runner<INT>($$dpth,
            (log) => {
                if (log) {
                    log("INT");
                }
                let val: Nullable<string>;
                let res: Nullable<INT> = null;
                if (true
                    && (val = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.INT, val};
                }
                return res;
            }, cr)();
    }
    public match_($$dpth: number, cr?: ContextRecorder): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchSUM(0);
        const ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchSUM(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchSUM(0, rec);
        return new ParseResult(res, rec.getErr());
    }
    private mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    log(match.substring(3, match.length - 1));
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = {
                        overallPos: reg.lastIndex,
                        line: this.pos.line + lineJmp,
                        offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
                    };
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export class ParseResult {
    public ast: Nullable<SUM>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<SUM>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}